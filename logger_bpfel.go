// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLogger returns the embedded CollectionSpec for logger.
func loadLogger() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_LoggerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load logger: %w", err)
	}

	return spec, err
}

// loadLoggerObjects loads logger and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*loggerObjects
//	*loggerPrograms
//	*loggerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLoggerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLogger()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// loggerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loggerSpecs struct {
	loggerProgramSpecs
	loggerMapSpecs
}

// loggerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loggerProgramSpecs struct {
	BPF_KSYSCALL *ebpf.ProgramSpec `ebpf:"BPF_KSYSCALL"`
}

// loggerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loggerMapSpecs struct {
	ActiveReadArgsMap *ebpf.MapSpec `ebpf:"active_read_args_map"`
}

// loggerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLoggerObjects or ebpf.CollectionSpec.LoadAndAssign.
type loggerObjects struct {
	loggerPrograms
	loggerMaps
}

func (o *loggerObjects) Close() error {
	return _LoggerClose(
		&o.loggerPrograms,
		&o.loggerMaps,
	)
}

// loggerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLoggerObjects or ebpf.CollectionSpec.LoadAndAssign.
type loggerMaps struct {
	ActiveReadArgsMap *ebpf.Map `ebpf:"active_read_args_map"`
}

func (m *loggerMaps) Close() error {
	return _LoggerClose(
		m.ActiveReadArgsMap,
	)
}

// loggerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLoggerObjects or ebpf.CollectionSpec.LoadAndAssign.
type loggerPrograms struct {
	BPF_KSYSCALL *ebpf.Program `ebpf:"BPF_KSYSCALL"`
}

func (p *loggerPrograms) Close() error {
	return _LoggerClose(
		p.BPF_KSYSCALL,
	)
}

func _LoggerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed logger_bpfel.o
var _LoggerBytes []byte
